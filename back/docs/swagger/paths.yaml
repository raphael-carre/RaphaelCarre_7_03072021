/api/users/register:
  post:
    tags: ['Users']
    description: Creates a new user
    summary: Creates a new user
    requestBody:
      $ref: '#components/requestBodies/UserRegister'
    responses:
      201:
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  example: Utilisateur créé !
      400:
        content:
          application/json:
            schema:
              type: object
              properties:
                statusCode:
                  type: number
                  example: 400
                message:
                  type: string
                  example: Adresse e-mail non valide !
                key:
                  type: string
                  example: email

/api/users/login:
  post:
    tags: ['Users']
    description: User login
    summary: User login
    requestBody:
      $ref: '#components/requestBodies/UserLogin'
    responses:
      200:
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: string
                token:
                  type: string
      404:
        content:
          application/json:
            schema:
              type: object
              properties:
                statusCode:
                  type: number
                  example: 404
                message:
                  type: string
                  example: Adresse e-mail incorrecte !
                key:
                  type: string
                  example: email

/api/users:
  get:
    tags: ['Users']
    description: Returns every users in database
    summary: Returns every users in database
    security:
      - Auth: []
    responses:
      200:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#components/definitions/UserExtended'
      404:
        content:
          application/json:
            schema:
              type: object
              properties:
                statusCode:
                  type: number
                  example: 404
                message:
                  type: string
                  example: Aucun utilisateur enregistré !
                key:
                  example: null

/api/users/{id}:
  get:
    tags: ['Users']
    description: Returns one user from the database
    summary: Returns one user from the database
    security:
      - Auth: []
    parameters:
      - name: id
        in: path
        description: User id
        required: true
        schema: 
          type: number
    responses:
      200:
        content:
          application/json:
            schema:
              $ref: '#components/definitions/UserExtended'
      404:
        content:
          application/json:
            schema:
              type: object
              properties:
                statusCode:
                  type: number
                  example: 404
                message:
                  type: string
                  example: Utilisateur introuvable !
                key:
                  example: null
  put:
    tags: ['Users']
    description: Updates one user in the database
    summary: Updates one user in the database
    security:
      - Auth: []
    parameters:
      - name: id
        in: path
        description: User id
        required: true
        schema: 
          type: number
    requestBody:
      $ref: '#components/requestBodies/UserUpdate'
    responses:
      200:
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  example: Mise à jour effectuée !
                data:
                  $ref: '#components/schemas/User'
      401:
        content:
          application/json:
            schema:
              type: object
              properties:
                statusCode:
                  type: number
                  example: 401
                message:
                  type: string
                  example: Vous n'avez pas l'autorisation d'effectuer cette action !
                key:
                  example: null
  delete:
    tags: ['Users']
    description: Deletes one user in the database
    summary: Deletes one user in the database
    security:
      - Auth: []
    parameters:
      - name: id
        in: path
        description: User id
        required: true
        schema: 
          type: number
    responses:
      200:
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  example: Compte utilisateur supprimé !
      401:
        content:
          application/json:
            schema:
              type: object
              properties:
                statusCode:
                  type: number
                  example: 401
                message:
                  type: string
                  example: Vous n'avez pas l'autorisation d'effectuer cette action !
                key:
                  example: null

/api/posts:
  post:
    tags: ['Posts']
    description: Creates a new post in the database
    summary: Creates a new post in the database
    security:
      - Auth: []
    requestBody:
      $ref: '#components/requestBodies/Post'
    responses:
      201:
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  example: Votre publication est enregistrée !
                newPost:
                  $ref: '#components/schemas/Post'
      400:
        content:
          application/json:
            schema:
              type: object
              properties:
                statusCode:
                  type: number
                  example: 400
                message:
                  type: string
                  example: Votre publication est vide !
                key:
                  example: null
  get:
    tags: ['Posts']
    description: Returns every posts in database
    summary: Returns every posts in database
    security:
      - Auth: []
    responses:
      200:
        content:
          application/json:
            schema:
              $ref: '#components/definitions/Posts'
      404:
        content:
          application/json:
            schema:
              type: object
              properties:
                statusCode:
                  type: number
                  example: 404
                message:
                  type: string
                  example: Il n'existe aucune publication...
                key:
                  example: null

/api/posts/{id}:
  get:
    tags: ['Posts']
    description: Returns one post
    summary: Returns one post
    security:
        - Auth: []
    parameters:
      - name: id
        in: path
        description: Post id
        required: true
        schema:
          type: number
    responses:
      200:
        content:
          application/json:
            schema:
              $ref: '#components/definitions/Post'
      404:
        content:
          application/json:
            schema:
              type: object
              properties:
                statusCode:
                  type: number
                  example: 404
                message:
                  type: string
                  example: Publication introuvable !
                key:
                  example: null

  put:
    tags: ['Posts']
    description: Updates one post in the database
    summary: Updates one post in the database
    security:
      - Auth: []
    requestBody:
      $ref: '#components/requestBodies/Post'
    parameters:
      - name: id
        in: path
        description: Post id
        required: true
        schema: 
          type: number
    responses:
      200:
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  example: Publication mise à jour !
                data:
                  $ref: '#components/schemas/Post'
      400:
        content:
          application/json:
            schema:
              type: object
              properties:
                statusCode:
                  type: number
                  example: 400
                message:
                  type: string
                  example: Votre publication est vide !
                key:
                  example: null
  delete:
    tags: ['Posts']
    description: Deletes one post in the database
    summary: Deletes one post in the database
    security:
      - Auth: []
    parameters:
      - name: id
        in: path
        description: Post id
        required: true
        schema: 
          type: number
    responses:
      200:
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  example: Publication supprimée !
      404:
        content:
          application/json:
            schema:
              type: object
              properties:
                statusCode:
                  type: number
                  example: 404
                message:
                  type: string
                  example: Publication introuvable !
                key:
                  example: null

/api/posts/user/{userId}:
  get:
    tags: ['Posts']
    description: Returns every posts of a user
    summary: Returns every posts of a user
    security:
      - Auth: []
    parameters:
      - name: userId
        in: path
        description: User id
        required: true
        schema: 
          type: number
    responses:
      200:
        content:
          application/json:
            schema:
              $ref: '#components/definitions/Posts'
      404:
        content:
          application/json:
            schema:
              type: object
              properties:
                statusCode:
                  type: number
                  example: 404
                message:
                  type: string
                  example: Il n'existe aucune publication...
                key:
                  example: null

/api/comments/post/{postId}:
  post:
    tags: ['Comments']
    description: Creates a comment for a specific post
    summary: Creates a comment for a specific post
    security:
      - Auth: []
    parameters:
      - name: postId
        in: path
        description: Post id
        required: true
        schema: 
          type: number
    requestBody:
      $ref: '#components/requestBodies/Comment'
    responses:
      201:
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  example: Votre commentaire a été ajouté !
                commentsCounter:
                  type: number
                newComment:
                  $ref: '#components/schemas/Comment'
      400:
        content:
          application/json:
            schema:
              type: object
              properties:
                statusCode:
                  type: number
                  example: 400
                message:
                  type: string
                  example: Votre commentaire est vide !
                key:
                  example: null
  get:
    tags: ['Comments']
    description: Returns every comments for a specific post
    summary: Returns every comments for a specific post
    security:
      - Auth: []
    parameters:
      - name: postId
        in: path
        description: Post id
        required: true
        schema: 
          type: number
    responses:
      200:
        content:
          application/json:
            schema:
              type: object
              properties:
                  commentsCounter:
                    type: number
                  comments:
                    type: array
                    items:
                      allOf:
                        - $ref: '#components/schemas/Comment'
                        - type: object
                          properties:
                            User: 
                              $ref: '#components/definitions/UserLight'
      500:
        content:
          application/json:
            schema:
              type: object
              properties:
                statusCode:
                  type: number
                  example: 500
                message:
                  type: string
                  example: Il y a eu un problème !
                key:
                  example: null

/api/comments/{id}:
  put:
    tags: ['Comments']
    description: Updates a comment
    summary: Updates a comment
    security:
      - Auth: []
    requestBody:
      $ref: '#components/requestBodies/Comment'
    parameters:
      - name: id
        in: path
        description: Comment id
        required: true
        schema: 
          type: number
    responses:
      200:
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  example: Commentaire mis à jour !
                data:
                  $ref: '#components/schemas/Comment'
      404:
        content:
          application/json:
            schema:
              type: object
              properties:
                statusCode:
                  type: number
                  example: 404
                message:
                  type: string
                  example: Commentaire introuvable !
                key:
                  example: null
  delete:
    tags: ['Comments']
    description: Deletes a comment
    summary: Deletes a comment
    security:
      - Auth: []
    parameters:
      - name: id
        in: path
        description: Comment id
        required: true
        schema: 
          type: number
    responses:
      200:
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  example: Commentaire supprimé !
      404:
        content:
          application/json:
            schema:
              type: object
              properties:
                statusCode:
                  type: number
                  example: 404
                message:
                  type: string
                  example: Commentaire introuvable !
                key:
                  example: null

/api/likes/posts/{id}:
  post:
    tags: ['Likes']
    description: Like / dislike a post
    summary: Like / dislike a post 
    security:
      - Auth: []
    parameters:
      - name: id
        in: path
        description: Post id
        required: true
        schema: 
          type: number
    responses:
      200:
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  example: Vous aimez cette publication !
      404:
        content:
          application/json:
            schema:
              type: object
              properties:
                statusCode:
                  type: number
                  example: 404
                message:
                  type: string
                  example: Publication introuvable !
                key:
                  example: null
  get:
    tags: ['Likes']
    description: Returns every users who liked/disliked a specific post
    summary: Returns every users who liked/disliked a specific post
    security:
      - Auth: []
    parameters:
      - name: id
        in: path
        description: Post id
        required: true
        schema: 
          type: number
    responses:
      200:
        content:
          application/json:
            schema:
              type: array
              items:
                allOf:
                  - $ref: '#components/schemas/Like'
                  - type: object
                    properties:
                      User:
                        $ref: '#components/definitions/UserLight'
      404:
        content:
          application/json:
            schema:
              type: object
              properties:
                statusCode:
                  type: number
                  example: 404
                message:
                  type: string
                  example: Publication introuvable !
                key:
                  example: null
                  
/api/likes/users/{id}:
  get:
    tags: ['Likes']
    description: Returns posts liked by a specific user
    summary: Returns posts liked by a specific user 
    security:
      - Auth: []
    parameters:
      - name: id
        in: path
        description: User id
        required: true
        schema: 
          type: number
    responses:
      200:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#components/schemas/Like'
      404:
        content:
          application/json:
            schema:
              type: object
              properties:
                statusCode:
                  type: number
                  example: 404
                message:
                  type: string
                  example: Utilisateur introuvable !
                key:
                  example: null

/api/password/lost:
  post:
    tags: ['Password']
    description: Asks for a random code for an existing user email
    summary: Asks for a random code for an existing user email
    requestBody:
      $ref: '#components/requestBodies/LostPassword'
    responses:
      200:
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
                  example: Un e-mail vous a été envoyé !
      404:
        content:
          application/json:
            schema:
              type: object
              properties:
                statusCode:
                  type: number
                  example: 404
                message:
                  type: string
                  example: Utilisateur introuvable !
                key:
                  example: null

/api/password/verify:
  post:
    tags: ['Password']
    description: Verifies the given code
    summary: Verifies the given code
    requestBody:
      $ref: '#components/requestBodies/VerifyCode'
    responses:
      200:
        description: Returns true
      400:
        content:
          application/json:
            schema:
              type: object
              properties:
                statusCode:
                  type: number
                  example: 400
                message:
                  type: string
                  example: Votre code a expiré !
                key:
                  example: null

/api/password/reset:
  post:
    tags: ['Password']
    description: Creates a new password
    summary: Creates a new password
    requestBody:
      $ref: '#components/requestBodies/ResetPassword'
    responses:
      200:
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
                  example: Votre mot de passe a été modifié !
      500:
        content:
          application/json:
            schema:
              type: object
              properties:
                statusCode:
                  type: number
                  example: 500
                message:
                  type: string
                  example: Il y a eu un problème...
                key:
                  example: null